{"version":3,"sources":["components/Navbar.js","components/Home.js","components/EnListItem.js","components/EnList.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","setTimeout","react_default","a","createElement","className","href","Home","children","Link","to","Component","EnListItem","state","open","handleClick","_this","setState","this","drawerOpen","text","onClick","EnList","lists","suffleLists","j","randomNum","Math","floor","random","indexOf","push","length","dd","filter","post","index","_this2","console","log","match","params","id","axios","get","then","res","arys","data","split","_this3","englishList","map","components_EnListItem","key","shuffle","bind","App","HashRouter","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf4ff0c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link,NavLink,withRouter} from 'react-router-dom';\r\n\r\nconst Navbar = (props) =>{\r\n   \r\n    setTimeout(()=>{\r\n       // props.history.push('/about')\r\n    },2000)\r\n    return(\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"brand-logo\">나의 영춘기 과제</a>\r\n                <ul className=\"right\">\r\n                 \r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar);","import React,{Component} from 'react';\r\n\r\nimport {Link} from 'react-router-dom';\r\nclass Home extends Component{\r\n\r\n  \r\n    render(){\r\n  \r\n        return (\r\n            <div children=\"container home\">\r\n                <h2 className=\"center\">Home</h2>    \r\n                <ul>\r\n            \r\n                    <li className=\"card\"><Link className=\"card-content card-title red-text\" to=\"/homwork/1\">homwork 1</Link></li>\r\n                    <li className=\"card\"><Link className=\"card-content card-title red-text\" to=\"/homwork/2\">homwork 2</Link></li>\r\n                    <li className=\"card\"><Link className=\"card-content card-title red-text\" to=\"/homwork/3\">homwork 3</Link></li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Home;\r\n\r\n","import React,{Component} from 'react';\r\n\r\n\r\nclass EnListItem extends Component {\r\n\r\n    state = {\r\n        open:false\r\n     \r\n    }\r\n    handleClick = () =>{\r\n        this.setState({\r\n            open:!this.state.open\r\n        })\r\n      \r\n    }\r\n    componentWillReceiveProps(props) {\r\n        this.setState({ open: props.drawerOpen })\r\n      }\r\n  \r\n    render() {\r\n        var {text} = this.props;\r\n        return (\r\n            <div className=\"post card\">                       \r\n                <div className=\"card-content\"  onClick={this.handleClick}>\r\n                    <span>{text[0]}</span>\r\n                    <p className=\"blue-text\">{this.state.open?text[1]:null}</p>\r\n                \r\n                \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnListItem;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport EnListItem from './EnListItem';\r\n\r\nclass EnList extends Component{\r\n    \r\n     \r\n    state = {\r\n      \r\n        lists:[],\r\n        suffleLists:[],\r\n        drawerOpen: false\r\n    }\r\n    shuffle(){\r\n       \r\n        var suffleLists=[];\r\n        for (var j=0; j<999; j++) {\r\n            var randomNum = Math.floor(Math.random() * 100);\r\n            if(suffleLists.indexOf(randomNum) === -1) {\r\n                suffleLists.push(randomNum);\r\n            \r\n                if (suffleLists.length === 30) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        var dd = this.state.lists.filter((post,index)=>{return (suffleLists.indexOf(index) !== -1)})\r\n        this.setState({\r\n            suffleLists:dd,\r\n            drawerOpen: false\r\n        })\r\n   \r\n       \r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props.match.params.id)\r\n      \r\n        axios.get('../homework'+this.props.match.params.id+'.csv')\r\n        .then(res=>{\r\n              \r\n          \r\n            var arys = res.data.split(/\\r?\\n|\\r/);\r\n          \r\n            \r\n        \r\n            this.setState({\r\n                lists:arys\r\n            })\r\n            this.setState({\r\n                suffleLists:arys\r\n            })\r\n        })\r\n    }\r\n   \r\n  \r\n    render(){\r\n      \r\n        const {suffleLists} = this.state;\r\n        \r\n       \r\n        const englishList = suffleLists.length?(\r\n            suffleLists.map((post,index)=>{\r\n                let text = post.split('$');\r\n              \r\n                return (\r\n                    <EnListItem text={text} key={index} drawerOpen={this.state.drawerOpen}/>         \r\n                    \r\n                )\r\n            \r\n            })\r\n        ):(\r\n            <div className=\"center\">No lists yet</div>\r\n        );\r\n        return(\r\n            <div className=\"container homework\">\r\n                <h4 className=\"center\">과제</h4>                  \r\n                <button  onClick={this.shuffle.bind(this)}>shuffle 30</button>         \r\n                {englishList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default EnList;\r\n\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport {HashRouter,Route,Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport EnList from './components/EnList';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n      \n        <HashRouter>\n          <div className=\"App\">\n            <Navbar/>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/homwork/:id\" component={EnList} />            \n           \n            </Switch>\n          </div>\n        </HashRouter>\n    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}